<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace声明该配置文件所对应的接口-->
<mapper namespace="com.nowcoder.community.Dao.UserMapper"> <!--namespace写UserMapper的全限定名,因为这个配置文件就是为UserMapper所服务的-->
    <!--直接复用 共享的sql语句-->
    <sql id="selectFields">
        id, username, password, salt, email, type, status, activation_code, header_url, create_time
    </sql>

    <sql id="insertFields">
        username, password, salt, email, type, status, activation_code, header_url, create_time
    </sql>
    
    <!--id写UserMapper中对应的方法名，返回类型resultType写User实体类，并且通过properties文件中设置过实体类所在的包，所以不用写User的全限定名-->
    <!--#{}大括号中为方法中的参数,前面那个是数据库中的字段-->
    <select id="selectById" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where id = #{id}
    </select>

    <select id="selectByName" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where username = #{username}
    </select>

    <select id="selectByEmail" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where email = #{email}
    </select>

    <!--parameterType 需要声明插入的东西的类型-->
    <!--keyProperty 告知属性-->
    <insert id="insertUser" parameterType="User" keyProperty="id">
        insert into user (<include refid="insertFields"></include>)
        values(#{username},#{password},#{salt},#{email},#{type},#{status},#{activationCode},#{headerUrl},#{createTime})
    </insert>


    <update id="UpdateStatus">
        update user set status = #{status} where id = #{id} ;
    </update>

    <update id="UpdateHeader">
        update user set header_url = #{headerUrl} where id = #{id} ;
    </update>


    <update id="UpdatePassword">
        update user set password = #{password} where id = #{id} ;
    </update>

</mapper>